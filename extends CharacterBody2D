extends CharacterBody2D

const RUN_SPEED := 200.0
const FlOOR_ACCELERATION := RUN_SPEED / 0.2
const AIR_ACCELERATION := RUN_SPEED /0.02
const SPRINT_SPEED := 400.0
const JUMP_VELOCITY := -200

var gravity := ProjectSettings.get("physics/2d/default_gravity") as float

@onready var bennben_sprint = $BennbenSprint
@onready var animation_player: AnimationPlayer = $AnimationPlayer
@onready var coyote_timer: Timer = $CoyoteTimer
@onready var jump_request_timer: Timer = $JumpRequestTimer

func _unhandled_input(event: InputEvent) -> void:#事件回调
	if event.is_action_pressed("jump"):#判断当前事件
		jump_request_timer.start()
		
	if event.is_action_released("jump") and velocity.y < JUMP_VELOCITY / 2:
		velocity.y = JUMP_VELOCITY / 2

func _physics_process(delta: float) -> void:
	var direction := Input.get_axis("move_left", "move_right")
	var acceleration := FlOOR_ACCELERATION if is_on_floor() else AIR_ACCELERATION
	velocity.x = move_toward(velocity.x, direction * RUN_SPEED, acceleration * delta)
	velocity.y += gravity * delta
	
	var can_jump := is_on_floor() or coyote_timer.time_left > 0#跳跃判定郊狼时间
	var should_jump := can_jump and jump_request_timer.time_left > 0#判断跳跃时间
	if should_jump:
		velocity.y = JUMP_VELOCITY
		coyote_timer.stop()
		jump_request_timer.stop()
	
	if is_on_floor():
		if is_zero_approx(direction):
			animation_player.play("idle")
		else:
			animation_player.play("run")
	else:
		animation_player.play("jump")
		
	if not is_zero_approx(direction):
		bennben_sprint.flip_h = direction < 0
	
	var was_on_floor := is_on_floor()
	move_and_slide()
	
	if was_on_floor != was_on_floor:
		if was_on_floor and not should_jump:
			coyote_timer.start() 
		else:
			coyote_timer.stop()
#
